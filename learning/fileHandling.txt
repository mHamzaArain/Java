Persistance = Mojoodgi

File Handling
===============

1. The java.io package contains nearly every class
    might ever need to perform I/O in Java.
2. Stream -> represents input source & output destination.
3. Java provides string but flexible support for 
    I/O related to files.
4. Stream represents a Source(generate data in the form of
    Streams) & a destination(consumes/read data available 
    as Stream).
5. Streams supports a huge range of source & destination 
    including disk file, arrays, other devices, other programs,
     etc..

    Type of Streams
    ================
    a. Byte Streams
       -------------
       Hnadling I/O of bytes.

    b. Character Streams
       ------------------
       Handling I/O of characters.

1. File class
==============

>>> FileClass.java <<<
------------------------------------------------------------
/**
 * File Class
 * ===========
 * 1. Abstract representation of file & directory
 *    pathnames.
 * 2. Every file has metadata that has info:
 *      * name, size, permissions, etc.
 */

import java.io.File;
import java.io.IOException;

class FileClass {
    //This code must be either try/catch/fianlly block OR by use of throws to handle exception.
    public static void main(String[] args) throws IOException {
        File f1 = new File("/media/hamza/linux/Coding/Java/learning/fileHandling/FileClass/preMadeFile.txt");
        File f2 = new File("/media/hamza/linux/Coding/Java/learning/fileHandling/FileClass/postMadeFile.txt");
        f2.createNewFile();

        // Existance check at runtime.
        System.out.println(f1.exists()); // True; Checkk existance
        System.out.println(f1.canWrite()); // True: File permissions
        System.out.println(f1.length()); // 9; file size in byte
        System.out.println(f1.getName()); // preMadeFile.txt; file name
        System.out.println(f1.getAbsolutePath()); // Get abs path
        System.out.println(f1.toPath()); // Get abs path
        System.out.println(f1.isHidden()); // false; Check hidden or not
        
        f2.delete(); // delete file
    }
}

------------------------------------------------------------

==========================================================================================================================

2. FileOutputStream 
====================

>>> FileOutputStream_Write.java <<<
-----------------------------------------------------------
/** FileOutputStream
 * ==================
 * 1. To write/append data in  file.
 */

import java.io.FileOutputStream;
import java.io.IOException;

public class FileOutputStream_Write {
    public static void main(String[] args) throws IOException {
        // Make file if it's not made.
        // 2nd arg: bool -> append to that file if exits(True)
        FileOutputStream fos = new FileOutputStream("file.txt", true);
        String str = "Arain\n";

        char[] chArr = str.toCharArray();
        for (char c: chArr) {
            fos.write(c);
        }
        fos.close(); 
    }
}

------------------------------------------------------------

==========================================================================================================================

3. BufferedWriter 
=================

>>> BufferedWriter.java <<<
-----------------------------------------------------------
/** BufferedWriter
 * ================
 * 1. This allows to write string as whole
 *      due to modified buffer space 
 * 
 */

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;


public class BufferedWriter_Writer  {   
    // FileWriter class is used as object that can be used as:
    // obj = new FileWriter()
    public static void main(String[] args) throws IOException{
        BufferedWriter bw = new BufferedWriter(new FileWriter(
        "/media/hamza/linux/Coding/Java/learning/fileHandling/BufferedWriter/file.txt",
        true)); // append = true
        bw.write("Computer is up machine");
        bw.close();`
    }
}

------------------------------------------------------------

==========================================================================================================================

4. BufferedReader
==================

>>> BufferedReader_Reader.java <<<
-----------------------------------------------------------
/** BufferedReader
 * ================
 * 1. This allows to write string as whole
 *      due to modified buffer space 
 * 
 */

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;


public class BufferedReader_Reader  {   
    public static void main(String[] args) throws IOException{
        // FileReader class is used as object that can be used as:
        // obj = new FileReader(PATH)
        BufferedReader bw = new BufferedReader(new FileReader(
            "/media/hamza/linux/Coding/Java/learning/fileHandling/BufferedReader_Reader/file.txt"));
        int i; // i=0
        boolean flag = true;
        while(flag) {
            i = bw.read();
            if (i != -1) // i = no char 
                System.out.print((char)i);
            else 
                flag = false;
        }
        bw.close();
    }
}

------------------------------------------------------------

==========================================================================================================================

. 
==============

>>> .java <<<
-----------------------------------------------------------


------------------------------------------------------------

==========================================================================================================================